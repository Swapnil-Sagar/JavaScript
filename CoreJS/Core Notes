1. Call Bind and Apply

    The call, bind and apply methods can be used to set the this keyword independent of how a function is called. 
    The bind method creates a copy of the function and sets the this keyword, while the call and apply methods 
    sets the this keyword and calls the function immediately.


    - In Call method we can pass the arguments individually coma separated.
    - In apply method we cac pass the arguments as array list.
    - Bind method is similar to call but does not directly calls the function instead it returns a copy stored in a varuable which can be invoked later.

2. Polyfill for bind is used when we need to implement our own bind method.

3. Currying
    Currying refers to the process of transforming a function with multiple arity into the same function with less arity. The curried effect is achieved 
    by binding some of the arguments to the first function invoke, so that those values are fixed for the next invocation.

    2 Ways to perform currying- using bind , using closures. (See js file)

4. Debouncing and Throttling are used for optimization by limiting the rate of function calls.

5. Debouncing
    The debounce() function forces a function to wait a certain amount of time before running again. The function is built to limit
     the number of times a function is called. ... The function aims to reduce overhead by preventing a function from being called 
     several times in succession.

6. Throttling
    Throttling is a technique in which, no matter how many times the user fires the event, the attached function will be executed 
    only once in a given time interval. 

7. Async & Defer 
    These are boolean attributes which are used along with script tags to load the externam scripts efficiently
    into the web page 

    **In normal HTML parsing if the browser encounters a script tag, it will pause the HTML parsing and fetches the 
        script after that it loads the script and once the script is loaded fully then it will continue to parse the HTML***

   " With async, the file gets downloaded asynchronously and then executed as soon as it’s downloaded."
    Here the browser will Parse the HTML and Fetches the script simultaneously, and once the script has been fetch
    the browser pause the parsing, loads the script and then continue parsing  

    "The defer attribute tells the browser not to wait for the script. Instead, the browser will continue to process the HTML, 
    build DOM. The script loads “in the background”, and then runs when the DOM is fully built."
    In simple words, here the browser will Parse the HTML from start to finish, and if it encounters a script, it will fetch it simultaneously 
    and wait for HTML to parse and then loads the script.

8. Difference between Async and Defer

    - Async does not guarantee the order or script execution but defer does.
        (don't use Async if the scripts are dependent on each other)

    - Only use Async if you are loading external script like (google analytics, maps).

    *Prefer Defer* 

9. Event Bubbling & Capturing 
    Event bubbling and capturing are two ways of event propagation in the HTML DOM API, when an event occurs in an element inside another element, and both 
    elements have registered a handle for that event. The event propagation mode determines in which order the elements receive the event.

    With bubbling, the event is first captured and handled by the innermost element and then propagated to outer elements.
    With capturing/trickling, the event is first captured by the outermost element and propagated to the inner elements.
    
10. Event Delegation 
        JavaScript event delegation is a simple technique by which you add a single event handler to a parent element in order to avoid having to add event handlers to multiple child elements.
        It is based on event bubbling. 

    Advantages 
        - Saves Memory
        - Writing less code
        - DOM manipulation gets easies 
    Limitation
        - All events are not bubbleup like - blur, resizing, focus, scrolling, etc
        - Stop propagation will not work

11. Prototype
        The prototype is an object that is associated with every functions and objects by default in JavaScript. Same is the case for functions.
        In simple words whenever an object is being created JS Engine attaches some hidden (predefined) object to your created object like (.length, .push, .pop, etc)
        All the hidden objects are stored in __proto__ . 
        __proto__ is a historical getter/setter for [[Prototype]]

    We can make our prototype function which can be accessabe by all other function using
    Function.prototype..

12. Prototype Chain
     The arr.__proto__ is the Array.prototype 
     and arr.__proto__.__proto__  is the Object.prototype
     and arr.__proto__.__proto__.__proto__ is actually NULL ... This is Prototype Chain

    So, Every object has a prototype, including the prototype object. This "chain" goes all the way back until it reaches an object that has no prototype, usually Object's prototype.



13. Prototypal Inheritance
    Where an object in inheriting properties and methods from the __proto__ which is pointing to another object.
    object2.__proto__ = object;


14. Local Storage & Session Storage
    Data in session storage only persists for a session.

    LocalStorage is almost the same as the session storage but the major difference is that it does not have an expiry.
    Due to security reasons it follows the same-origin policy. Same-Origin refers to the same Protocol, same host, and the same port.
    For local Storage we use localStorage.setItem(key,value) to insert data in local storage and 
    localStorage.getItem(key) to retrieve the data and localStorage.removeItem(key) to remove any item. Also we can use
    localStorage.clear() to clear everything


